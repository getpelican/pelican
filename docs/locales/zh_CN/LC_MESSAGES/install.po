# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010–2023
# This file is distributed under the same license as the Pelican package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2023.
#
msgid ""
msgstr ""
"Project-Id-Version: Pelican 4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-11-19 20:08+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: zh_CN\n"
"Language-Team: zh_CN <LL@li.org>\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.13.0\n"

#: ../../install.rst:2
msgid "Installing Pelican"
msgstr "安装Pelican"

#: ../../install.rst:4
msgid ""
"Pelican currently runs best on |min_python|; earlier versions of Python "
"are not supported."
msgstr "Pelican需要运行在 |min_python| 版本以上的Python，低版本的Python是不支持的。"

#: ../../install.rst:6
msgid ""
"You can install Pelican via several different methods. The simplest is "
"via Pip_::"
msgstr "有几种不同的方法可以安装Pelican，最简单的就是通过 Pip_："

#: ../../install.rst:10
msgid "Or, if you plan on using Markdown::"
msgstr "如果您需要使用Markdown，请使用下面的命令安装："

#: ../../install.rst:14
msgid ""
"(Keep in mind that some operating systems will require you to prefix the "
"above command with ``sudo`` in order to install Pelican system-wide.)"
msgstr "（在某些操作系统中，需要在命令前加 ``sudo`` 才能在整个系统上安装Pelican）"

#: ../../install.rst:17
msgid ""
"While the above is the simplest method, the recommended approach is to "
"create a virtual environment for Pelican via virtualenv_ before "
"installing Pelican. Assuming you have virtualenv_ installed, you can then"
" open a new terminal session and create a new virtual environment for "
"Pelican::"
msgstr ""
"尽管上面是最简单的安装方法，但我们推荐使用虚拟环境 virtualenv_ 完成Pelican的安装。当您安装好了 virtualenv_ "
"后，打开一个新的命令行来为Pelican创建一个虚拟环境："

#: ../../install.rst:26
msgid ""
"Once the virtual environment has been created and activated, Pelican can "
"be installed via ``python -m pip install pelican`` as noted above. "
"Alternatively, if you have the project source, you can install Pelican "
"using the distutils method::"
msgstr ""
"当创建并激活虚拟环境后，使用之前提到过的命令 ``python -m pip install pelican`` "
"就可以安装Pelican了。或者，如果您想要从源码安装，可以通过distutils的安装脚本完成："

#: ../../install.rst:33
msgid ""
"If you have Git installed and prefer to install the latest bleeding-edge "
"version of Pelican rather than a stable release, use the following "
"command::"
msgstr "如果安装过Git，并且您希望安装Pelican的最最新版本（而不是稳定版），请使用下面的命令："

#: ../../install.rst:38
msgid ""
"Once Pelican is installed, you can run ``pelican --help`` to see basic "
"usage options. For more detail, refer to the :doc:`Publish<publish>` "
"section."
msgstr ""
"当您安装了Pelican，可以执行 ``pelican --help`` 命令来查看一些基本的用法。从文档的 "
":doc:`Publish<publish>` 章节可以了解更多信息。"

#: ../../install.rst:42
msgid "Optional packages"
msgstr "可选包"

#: ../../install.rst:44
msgid ""
"If you plan on using `Markdown <https://pypi.org/project/Markdown/>`_ as "
"a markup format, you can install Pelican with Markdown support::"
msgstr ""
"如您希望使用 `Markdown <https://pypi.org/project/Markdown/>`_ "
"来写作执行下面的命令来安装Markdown支持："

#: ../../install.rst:49
msgid ""
"Typographical enhancements can be enabled in your settings file, but "
"first the requisite `Typogrify <https://pypi.org/project/typogrify/>`_ "
"library must be installed::"
msgstr ""
"Pelican还支持排版增强，若您需要使用，请先安装 `Typogrify "
"<https://pypi.org/project/typogrify/>`_ 库，稍后您可以在设置文件中启用它。"

#: ../../install.rst:56
msgid "Dependencies"
msgstr "依赖"

#: ../../install.rst:58
msgid ""
"When Pelican is installed, the following dependent Python packages should"
" be automatically installed without any action on your part:"
msgstr "当Pelican安装完成后，下面的所有Python依赖应该都会自动安装，无需另外做任何操作："

#: ../../install.rst:61
msgid ""
"`feedgenerator <https://pypi.org/project/feedgenerator/>`_, to generate "
"the Atom feeds"
msgstr "`feedgenerator <https://pypi.org/project/feedgenerator/>`_，用于生成Atom feeds"

#: ../../install.rst:63
msgid "`jinja2 <https://pypi.org/project/Jinja2/>`_, for templating support"
msgstr "`jinja2 <https://pypi.org/project/Jinja2/>`_，用于模板"

#: ../../install.rst:64
msgid "`pygments <https://pypi.org/project/Pygments/>`_, for syntax highlighting"
msgstr "`pygments <https://pypi.org/project/Pygments/>`_，用于语法高亮"

#: ../../install.rst:65
msgid ""
"`docutils <https://pypi.org/project/docutils/>`_, for supporting "
"reStructuredText as an input format"
msgstr "`docutils <https://pypi.org/project/docutils/>`_，用于reStructuredText格式"

#: ../../install.rst:67
msgid ""
"`blinker <https://pypi.org/project/blinker/>`_, an object-to-object and "
"broadcast signaling system"
msgstr "`blinker <https://pypi.org/project/blinker/>`_，对象-对象的信号广播系统"

#: ../../install.rst:69
msgid ""
"`unidecode <https://pypi.org/project/Unidecode/>`_, for ASCII "
"transliterations of Unicode text utilities"
msgstr ""
"`unidecode "
"<https://pypi.org/project/Unidecode/>`_，用于将Unicode文本转为ASCII字符的音译"

#: ../../install.rst:72
msgid ""
"`MarkupSafe <https://pypi.org/project/MarkupSafe/>`_, for a markup-safe "
"string implementation"
msgstr "`MarkupSafe <https://pypi.org/project/MarkupSafe/>`_，用于转义字符的安全处理"

#: ../../install.rst:74
msgid ""
"`python-dateutil <https://pypi.org/project/python-dateutil/>`_, to read "
"the date metadata"
msgstr ""
"`python-dateutil <https://pypi.org/project/python-"
"dateutil/>`_，用于读取日期相关的元数据"

#: ../../install.rst:78
msgid "Upgrading"
msgstr "更新升级"

#: ../../install.rst:80
msgid ""
"If you installed a stable Pelican release via Pip_ and wish to upgrade to"
" the latest stable release, you can do so by adding ``--upgrade``::"
msgstr "对于通过 Pip_ 安装的稳定版本的Pelican，可以通过在安装命令中加 ``--upgrade`` 来升级到最新版："

#: ../../install.rst:85
msgid ""
"If you installed Pelican via distutils or the bleeding-edge method, "
"simply perform the same step to install the most recent version."
msgstr "对于通过distutils安装的或是通过Git安装的最最新版的Pelican再做一遍和安装时同样的步骤即可。"

#: ../../install.rst:89
msgid "Kickstart your site"
msgstr "启动网站"

#: ../../install.rst:91
msgid ""
"Once Pelican has been installed, you can create a skeleton project via "
"the ``pelican-quickstart`` command, which begins by asking some questions"
" about your site::"
msgstr "Pelican安装完成后，通过 ``pelican-quickstart`` 命令创建项目的整体框架执行这个命令后，您需要输入一些站点相关的信息："

#: ../../install.rst:97
msgid ""
"If run inside an activated virtual environment, ``pelican-quickstart`` "
"will look for an associated project path inside "
"``$VIRTUAL_ENV/.project``. If that file exists and contains a valid "
"directory path, the new Pelican project will be saved at that location. "
"Otherwise, the default is the current working directory. To set the new "
"project path on initial invocation, use: ``pelican-quickstart --path "
"/your/desired/directory``"
msgstr ""
"如果是在虚拟环境中执行 ``pelican-quickstart`` ，系统会自动在 ``$VIRTUAL_ENV/.project`` "
"目录中查找这个命令若这个这个命令存在并且路径是正确的，一个新的Pelican项目就会在目标位置创建。否则，会默认在当前的工作目录下创建这个项目。若要在初始化时指定项目路径，请使用"
" ``pelican-quickstart --path /your/desired/directory``"

#: ../../install.rst:104
msgid ""
"Once you finish answering all the questions, your project will consist of"
" the following hierarchy (except for *pages* — shown in parentheses below"
" — which you can optionally add yourself if you plan to create non-"
"chronological content)::"
msgstr ""
"当您回答完所有问题后，项目就会创建。项目中会包含下述的一些层级结构（除了用括号括起来的 "
"*pages*）如果有一些内容不需要按时间排序，您可以将它们放在（pages）所在的位置："

#: ../../install.rst:118
msgid ""
"The next step is to begin to adding content to the *content* folder that "
"has been created for you."
msgstr "下一步就可以开始往 *content* 目录中添加自己创建的内容了。"

#~ msgid "`pytz <https://pypi.org/project/pytz/>`_, for timezone definitions"
#~ msgstr "`pytz <https://pypi.org/project/pytz/>`_，用于定义时区"
